[global]

# daemonize: Whether or not to detach from terminal on startup
#daemonize = False

# pid_file: Path of the process ID file. Can be none, but only if not daemonized
#pid_file = /solid/home/z0rb1n0/src/pgplex/run/pgplex.pid

# config_file: Path of the configuration file. As a matter of fact, can only be
# affected from the command line or environment (the former overrides the latter)
#config_file = /solid/home/z0rb1n0/src/pgplex/etc/pgplex.conf



[listener]

# listen_addresses: postgresql-equivalent, see
# https://www.postgresql.org/docs/current/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS
listen_addresses = localhost,ip6-localhost

# tcp_keepalives_interval: postgresql-equivalent, see
# https://www.postgresql.org/docs/current/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS
#tcp_keepalives_interval = 0

# ssl: postgresql-equivalent, see
# https://www.postgresql.org/docs/9.6/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SECURITY
#ssl = False

# max_connections: postgresql-equivalent, see
# https://www.postgresql.org/docs/current/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS . Note that this applies to
# incoming connections and does not encroach shared memory
#max_connections = 3

# ssl_key_file: postgresql-equivalent, see
# https://www.postgresql.org/docs/9.6/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SECURITY
#ssl_key_file = /solid/home/z0rb1n0/src/pgplex/etc/ssl/server.key

# ssl_ca_file: postgresql-equivalent, see
# https://www.postgresql.org/docs/9.6/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SECURITY
#ssl_ca_file = /solid/home/z0rb1n0/src/pgplex/etc/ssl/ca.crt

# tcp_keepalives_idle: postgresql-equivalent, see
# https://www.postgresql.org/docs/current/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS
#tcp_keepalives_idle = 0

# unix_socket_group: postgresql-equivalent, see
# https://www.postgresql.org/docs/current/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS
#unix_socket_group = None

# unix_socket_permissions: postgresql-equivalent, see
# https://www.postgresql.org/docs/current/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS
#unix_socket_permissions = 0600

# control_db_name: A special database name that can is reserved for connections to
# the pgplex run-time interface. Connection to this database cause queries to be
# routed to an internal management engine to inspect/manipulate the run-time state
# of pgplex.
#control_db_name = pgplex_control

# port: postgresql-equivalent, see
# https://www.postgresql.org/docs/current/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS
#port = 5432

# tcp_keepalives_count: postgresql-equivalent, see
# https://www.postgresql.org/docs/current/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS
#tcp_keepalives_count = 0

# housekeeping_interval: Python is not really great at not missing signals,
# especially SIGCHLD. We periodically wake up the listener to check for zombies to
# reap (and eventually do more stuff in the future). This specifes the interval
# between checks, in milliseconds. 0 or less disables housekeeping entirely (not
# recommended
#housekeeping_interval = 50

# unix_socket_directories: postgresql-equivalent, see
# https://www.postgresql.org/docs/current/static/runtime-config-
# connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS
#unix_socket_directories = /tmp

# max_connections_control_db: much like max_connections, but it limits connections
# to the control_db instead. NOTE: connections to the system db count towards the
# global max_connections limit
#max_connections_control_db = 8



[pool]

# max_backends: Maximum number of upstream connections to the upstream backends
# (typically an ac postgresql listeners)
#max_backends = 64



[multiplexer]

# channel_timeout: Transaction poolers continuously re-assign database sessions to
# diffent clients, however SQL sessins are stateful, which requires some degree of
# persistent correlation between the incoming connection and the backend (eg: a
# backend cannot safely be re-assigned to another client as long as it is in
# transaction). Clients also have the ability to change run-time parameters such
# as the session time zone (eg, through SET option TO ..., connection parameters
# or the like). PgPlex keeps track of what postgres settings a given client
# configured for itself and restores them into to the server session before making
# the backend available to the client. This operation, however, comes at the cost
# of one round-trip to the postgres backend, which has a non negligible overhead,
# especially for workloads comprised of lots of small queries (obviously each
# query bind the client to the backend for its duration) To mitigate this problem,
# it is possible to cause client-backend bond (called "channel") to linger for
# some time after its query/transaction has ended, in order to increase the
# chances that the same binding will be reused without requiring settings to be
# restored, as the server-side parameters are guaranteed to be consistent with the
# client's expectations of them until unbind. Unbind_delay specifies such
# duration. Be advised that higher values are more likely to impact the
# multiplexer's ability to efficiently spread requests across the pool by reusing
# backends A value of 0 completely disables delayed unbinding, effectively forcing
# the backend run-time to be restored in full for each new query/transaction. A
# positive value specifies for how long a backend-facing connection should stay
# bound to the client after a query/transaction completion A vaule of -1 (the
# default) never unbinds client sessions from backends until they disconnect,
# effectively disabling transaction pooling and turning it into simple connection
# pooling
#channel_timeout = -1
